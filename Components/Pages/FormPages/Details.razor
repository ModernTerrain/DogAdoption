@page "/forms/details"
@using Microsoft.EntityFrameworkCore
@using DogAdoption.Models
@inject IDbContextFactory<DogAdoption.Data.DogAdoptionContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Form</h2>
    <hr />
    @if (form is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@form.Address</dd>
            <dt class="col-sm-2">HouseholdIncome</dt>
            <dd class="col-sm-10">@form.HouseholdIncome</dd>
            <dt class="col-sm-2">NumberOfPets</dt>
            <dd class="col-sm-10">@form.NumberOfPets</dd>
            <dt class="col-sm-2">DogOfInterest</dt>
            <dd class="col-sm-10">@form.DogOfInterest</dd>
            <dt class="col-sm-2">DateOfInterest</dt>
            <dd class="col-sm-10">@form.DateOfInterest</dd>
        </dl>
        <div>
            <a href="@($"/forms/edit?id={form.Id}")">Edit</a> |
            <a href="@($"/forms")">Back to List</a>
        </div>
    }
</div>

@code {
    private Form? form;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        form = await context.Form.FirstOrDefaultAsync(m => m.Id == Id);

        if (form is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
