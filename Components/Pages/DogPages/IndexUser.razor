@page "/dogs/user"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using DogAdoption.Models
@using DogAdoption.Data
@implements IAsyncDisposable
@inject IDbContextFactory<DogAdoption.Data.DogAdoptionContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<form action="/dogs" data-enhance>
    <table class="table table-sm">
        <tr>
            <td>
                Name
            </td>
            <td>
                Age Lower Limit
            </td>
            <td>
                Age Upper Limit
            </td>
            <td>
                Hypoallergenic
            </td>
            <td>
                Status
            </td>
        </tr>
        <tr>
            <td>
                <input type="search" name="nameFilter" />
            </td>
            <td>
                <input type="number" name="ageFilterLower" />
            </td>
            <td>
                <input type="number" name="ageFilterUpper" />
            </td>
            <td>
                <input type="radio" id="yes" name="hypo" value="true">
                <label for="yes">Yes</label><br>
                <input type="radio" id="no" name="hypo" value="false">
                <label for="no">No</label><br>
            </td>
            <td>
                <input type="radio" id="available" name="status" value="Available">
                <label for="available">Available</label><br>
                <input type="radio" id="pending" name="status" value="Adoption Pending">
                <label for="pending">Adoption Pending</label><br>
            </td>
        </tr>
        <tr>
            <td>
                Breed
            </td>
            <td>
                Adoption Fee Lower Limit
            </td>
            <td>
                Adoption Fee Upper Limit
            </td>
            <td colspan="2">
                Size
            </td>
        </tr>
        <tr>
            <td>
                <input type="search" name="breedFilter" />
            </td>
            <td>
                <input type="number" name="priceFilterLower" />
            </td>
            <td>
                <input type="number" name="priceFilterUpper" />
            </td>
            <td colspan="2">
                <input type="radio" id="small" name="size" value="Small">
                <label for="small">Small</label><br>
                <input type="radio" id="medium" name="size" value="Medium">
                <label for="medium">Medium</label><br>
                <input type="radio" id="large" name="size" value="Large">
                <label for="large">Large</label>
            </td>
        </tr>
    </table>
    <input type="submit" value="Search" />
</form>

<QuickGrid Class="table" Items="FilteredDogs">
    <TemplateColumn Context="dog">
        <img src="@($"/images/{dog.ImageFileName}")" alt="" width="60" height="40" class="d-inline-block align-text-top">
    </TemplateColumn>

    <PropertyColumn Property="dog => dog.Name" />
    <PropertyColumn Property="dog => dog.Age" />
    <PropertyColumn Property="dog => dog.Breed" />
    <PropertyColumn Property="dog => dog.Size" />
    <PropertyColumn Property="dog => dog.Hypoallergenic" />
    <PropertyColumn Property="dog => dog.Status" />
    <PropertyColumn Property="dog => dog.AdoptionFee" />


</QuickGrid>

@code {
    private DogAdoptionContext context = default!;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    [SupplyParameterFromQuery]
    private string? NameFilter { get; set; }
    [SupplyParameterFromQuery]
    private int? AgeFilterLower { get; set; }
    [SupplyParameterFromQuery]
    private int? AgeFilterUpper { get; set; }
    [SupplyParameterFromQuery]
    private bool? Hypo { get; set; }
    [SupplyParameterFromQuery]
    private string? Status { get; set; }
    [SupplyParameterFromQuery]
    private string? BreedFilter { get; set; }
    [SupplyParameterFromQuery]
    private decimal? PriceFilterLower { get; set; }
    [SupplyParameterFromQuery]
    private decimal? PriceFilterUpper { get; set; }
    [SupplyParameterFromQuery]
    private string? Size { get; set; }

    private IQueryable<Dog> FilteredDogs =>
        context.Dog.Where(m => m.Name!.Contains(NameFilter ?? string.Empty))
        .Where(m => m.Age! >= AgeFilterLower || AgeFilterLower == null)
        .Where(m => m.Age! <= AgeFilterUpper || AgeFilterUpper == null)
        .Where(m => m.Hypoallergenic == Hypo || Hypo == null)
        .Where(m => m.Status!.Contains(Status ?? string.Empty))
        .Where(m => m.Breed!.Contains(BreedFilter ?? string.Empty))
        .Where(m => m.AdoptionFee! >= PriceFilterLower || PriceFilterLower == null)
        .Where(m => m.AdoptionFee! <= PriceFilterUpper || PriceFilterLower == null)
        .Where(m => m.Size!.Contains(Size ?? string.Empty));

}
